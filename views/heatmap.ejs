<html>
<head>
    <% include template/header %>
    <script src="http://cdn.leafletjs.com/leaflet-0.7.3/leaflet.js"></script>
    <script src="js/heatmap/build/heatmap.js"></script>
    <script src='js/heatmap/plugins/leaflet-heatmap-revision.js'></script>
</head>
<body>
    <% include template/navbar %>
    <% include template/banner %>
    <link rel="stylesheet" href="http://cdn.leafletjs.com/leaflet-0.7.3/leaflet.css" />
    <style>
    .leaflet-container {
        background: rgba(255,255,255,.5)
    }
    </style>
    <div class="container-fluid">
        <div class="row">
            <div id = 'loading'></div>
            <div id = 'map'></div>
        </div>
    </div>
    <% include modules/modal %>
    <% include template/footer %>
</body>
<script>
    $("#loading").append("<div class='spinner-wrapper'><span class='spinner-text'>LOADING</span><span class='spinner'></span></div>");

    var baseLayer = L.tileLayer(
      'http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png',{
        noWrap: true,
        maxZoom: 8
      }
    );

    var cfg = {
      // radius should be small ONLY if scaleRadius is true (or small radius is intended)
      // if scaleRadius is false it will be the constant radius used in pixels
      "radius": 1,
      "maxOpacity": .8, 
      // scales the radius based on map zoom
      "scaleRadius": true, 
      // if set to false the heatmap uses the global maximum for colorization
      // if activated: uses the data maximum within the current map boundaries 
      //   (there will always be a red spot with useLocalExtremas true)
      "useLocalExtrema": true,
      // which field name in your data represents the latitude - default "lat"
      latField: 'lat',
      // which field name in your data represents the longitude - default "lng"
      lngField: 'lng',
      // which field name in your data represents the data value - default "value"
      valueField: 'count'
    };


    var heatmapLayer = new HeatmapOverlay(cfg);

    var map = new L.Map('map', {
      center: new L.LatLng(25.6586, -80.3568),
      zoom: 4,
      layers: [baseLayer, heatmapLayer]
    });

    $.get('/heatmap/retrieveArticlesKeyword')
    .success(function (rawData) {

        var articleLocations = []

        rawData.entry.forEach(function(elem, elemIndex) {
            for (i = 0; i < elem.affiliations.length; i++) {
                var location = {
                    city: elem.affiliations[i]["affiliation-city"],
                    country: elem.affiliations[i]["affiliation_country"]
                }
                articleLocations.push(location);
            }
        });
        var articleLocationsJSON = JSON.stringify(articleLocations)
        // console.log(articleLocationsJSON)
        $.get('/heatmap/retrieveLocationCoords', {"locations": articleLocationsJSON})
        .success(function (rawData) {

            // don't forget to include leaflet-heatmap.js
            var heatmapData = {
              data: []
            };

            if(rawData.results) {
                rawData.results.forEach(function(elem, elemIndex) {
                    if(elem.locations && elem.locations[0] && elem.locations[0]["latLng"]) {
                        heatmapData.data.push(elem.locations[0]["latLng"])
                    }
                });
            }   

            console.log(heatmapData);
            heatmapLayer.setData(heatmapData);
            $("#loading").hide();
        });
    });


</script>
</html>
