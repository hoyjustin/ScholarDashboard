<html>
<head>
    <% include template/header %>
    <script src="http://cdn.leafletjs.com/leaflet-0.7.3/leaflet.js"></script>
    <script src="js/heatmap/build/heatmap.js"></script>
    <script src='js/heatmap/plugins/leaflet-heatmap-revision.js'></script>
</head>
<body>
    <% include template/navbar %>
    <% include template/banner %>

    <link rel="stylesheet" href="http://cdn.leafletjs.com/leaflet-0.7.3/leaflet.css" />
    <div class="container-fluid">
        <div class="row">
                <div id = 'map'></div>
        </div>
    </div>
    <% include modules/modal %>
    <% include template/footer %>
</body>
<script>

    var w = 1280,
        h = 777;

    var NORMALIZE_COEF = 4;
    var Y_SCALING = 0;
    var X_SCALING = 0;
    var beaconList = [];
    var beaconLayer;

var baseLayer = L.tileLayer(
  'http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png',{
    attribution: '...',
    maxZoom: 18,
        minZoom: 2,
  }
);

var cfg = {
  // radius should be small ONLY if scaleRadius is true (or small radius is intended)
  // if scaleRadius is false it will be the constant radius used in pixels
  "radius": 2,
  "maxOpacity": .8, 
  // scales the radius based on map zoom
  "scaleRadius": true, 
  // if set to false the heatmap uses the global maximum for colorization
  // if activated: uses the data maximum within the current map boundaries 
  //   (there will always be a red spot with useLocalExtremas true)
  "useLocalExtrema": true,
  // which field name in your data represents the latitude - default "lat"
  latField: 'lat',
  // which field name in your data represents the longitude - default "lng"
  lngField: 'lng',
  // which field name in your data represents the data value - default "value"
  valueField: 'count'
};


var heatmapLayer = new HeatmapOverlay(cfg);

var map = new L.Map('map', {
  center: new L.LatLng(25.6586, -80.3568),
  zoom: 4,
  layers: [baseLayer, heatmapLayer]
});

$.get('/heatmap/retrieveLocationCoords')
.success(function (rawData) {
    console.log(rawData);

    // don't forget to include leaflet-heatmap.js
    var heatmapData = {
      max: 8,
      data: []
    };

            rawData.results.forEach(function(elem, elemIndex) {
                console.log(elem, elemIndex);

                if(elem.locations && elem.locations[0] && elem.locations[0].latLng) {
                                    console.log(JSON.stringify(elem.locations[0].latLng));
                                    heatmapData.data.push(elem.locations[0].latLng)
                //     elem.x = parseFloat((elem.coordX*NORMALIZE_COEF)-X_SCALING);
                //     elem.y = parseFloat((elem.coordY*NORMALIZE_COEF)-Y_SCALING);
                //     elem.date = moment(elem.timestamp.iso);
                //     var dateStr = moment(elem.timestamp.iso).format('MM/DD/YYYY');
                //     // check for preexisting data for a date
                //     if(dateStr in dateHash) {
                //         dateHash[dateStr].push(elem);
                //     }
                //     else {
                //         var goodData = [];
                //         goodData.push(elem);
                //         dateHash[dateStr] = goodData;
                //     }
                }
            });


    heatmapLayer.setData(heatmapData);
});


</script>
</html>
