<html>
<head>
    <% include template/header %>
    <script src="http://cdn.leafletjs.com/leaflet-0.7.3/leaflet.js"></script>
    <script src="js/heatmap/build/heatmap.js"></script>
    <script src='js/heatmap/plugins/leaflet-heatmap-revision.js'></script>
</head>
<body>
    <% include template/navbar %>
    <% include template/banner %>
    <div class="container-fluid" style="width:80%; position:relative; padding-bottom:20px; padding-top:20px; " >
        <div class="row">
        <div class="col-md-4"><p class="text-center" style="font-size: 230%">Search for Title Keyword:</p></div>
        <div class="col-md-8"><% include template/searchbar %></div>
        </div>
    </div>
    <link rel="stylesheet" href="http://cdn.leafletjs.com/leaflet-0.7.3/leaflet.css" />
    <style>
    .leaflet-container {
        background: rgba(255,255,255,.5)
    }
    </style>
    <div class="container-fluid" style="padding-bottom:30px">
        <div class="row">
            <div id = 'loading'></div>
            <div id = 'map'></div>
        </div>
    </div>
    <% include modules/modal %>
    <% include template/footer %>
</body>
<script>

    var baseLayer = L.tileLayer(
      'http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png',{
        noWrap: true,
        maxZoom: 8,
        minZoom: 2
      }
    );

    var cfg = {
      // radius should be small ONLY if scaleRadius is true (or small radius is intended)
      // if scaleRadius is false it will be the constant radius used in pixels
      "radius": 3,
      "maxOpacity": .8, 
      // scales the radius based on map zoom
      "scaleRadius": true, 
      // if set to false the heatmap uses the global maximum for colorization
      // if activated: uses the data maximum within the current map boundaries 
      //   (there will always be a red spot with useLocalExtremas true)
      "useLocalExtrema": true,
      // which field name in your data represents the latitude - default "lat"
      latField: 'lat',
      // which field name in your data represents the longitude - default "lng"
      lngField: 'lng',
      // which field name in your data represents the data value - default "value"
      valueField: 'count'
    };


    var heatmapLayer = new HeatmapOverlay(cfg);

    var map = new L.Map('map', {
      center: new L.LatLng(30, 0),
      zoom: 3,
      layers: [baseLayer, heatmapLayer]
    });

    var searchKeyword = function(event) {
        event.preventDefault();
        var keyword = $(this).find('input[name="searchinput"]').val();
        console.log("Search Queried: " + keyword)

        if (keyword != "") {
            $("#loading").append("<div class='spinner-wrapper'><span class='spinner-text'>LOADING</span><span class='spinner'></span></div>");
            //call to retrieve articles with keyword in title
            $.get('/heatmap/retrieveArticlesKeyword', {"keyword": keyword})
            .success(function (rawData) {
                var articleLocations = []
                if (rawData.entry) {
                    rawData.entry.forEach(function(elem, elemIndex) {
                        for (i = 0; i < elem.affiliations.length; i++) {
                            var location = {
                                city: elem.affiliations[i]["affiliation-city"],
                                country: elem.affiliations[i]["affiliation_country"]
                            }
                            articleLocations.push(location);
                        }
                    });
                }
                var articleLocationsJSON = JSON.stringify(articleLocations)
                //call to retrieve coordinates of article locations
                $.get('/heatmap/retrieveLocationCoords', {"locations": articleLocationsJSON})
                .success(function (rawData) {
                    var heatmapData = {
                      data: []
                    };
                    if(rawData.results) {
                        rawData.results.forEach(function(elem, elemIndex) {
                            if(elem.locations && elem.locations[0] && elem.locations[0]["latLng"]) {
                                heatmapData.data.push(elem.locations[0]["latLng"])
                            }
                        });
                    }   
                    heatmapLayer.setData(heatmapData);
                    $("#loading").empty();
                });
            });
        }
    }

    $('#searchform').submit(searchKeyword);

</script>
</html>
